name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_QUICK: ${{ github.repository }}/velocitas-quick

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Dockerfile syntax
      run: |
        echo "Validating Dockerfile.quick..."
        docker run --rm -i hadolint/hadolint < Dockerfile.quick
        

    - name: Validate template syntax
      run: |
        echo "Checking VehicleApp.template.cpp syntax..."
        # Basic syntax validation - check for required includes and class definition
        if ! grep -q "#include.*VehicleApp.h" templates/app/src/VehicleApp.template.cpp; then
          echo "‚ùå Missing VehicleApp.h include"
          exit 1
        fi
        
        if ! grep -q "class.*VehicleApp" templates/app/src/VehicleApp.template.cpp; then
          echo "‚ùå Missing VehicleApp class definition"
          exit 1
        fi
        
        echo "‚úÖ Template syntax validation passed"

    - name: Validate JSON configuration files
      run: |
        echo "Validating JSON configuration files..."
        
        # Validate AppManifest.json
        if [ -f "templates/AppManifest.json" ]; then
          cat templates/AppManifest.json | jq . > /dev/null
          echo "‚úÖ AppManifest.json is valid"
        fi
        
        # Validate .velocitas.json
        if [ -f ".velocitas.json" ]; then
          cat .velocitas.json | jq . > /dev/null
          echo "‚úÖ .velocitas.json is valid"
        fi

    - name: Check for security issues
      run: |
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets
        if grep -r -E "(password|secret|key|token)" --include="*.cpp" --include="*.h" --include="*.json" --exclude-dir=".git" .; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found - please review"
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi
        
        # Check for exposed ports in Dockerfile
        if grep -E "EXPOSE.*22|EXPOSE.*3389" Dockerfile.quick Dockerfile.dev; then
          echo "‚ö†Ô∏è SSH/RDP ports exposed - please review"
          exit 1
        fi

  build-test-quick:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Quick Build image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.quick
        push: false
        tags: velocitas-quick:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Quick Build functionality
      run: |
        echo "Testing Quick Build container..."
        
        # Test help command
        docker run --rm velocitas-quick:test help
        echo "‚úÖ Help command works"
        
        # Test validation
        cat templates/app/src/VehicleApp.template.cpp | docker run --rm -i velocitas-quick:test validate
        echo "‚úÖ Validation works"
        
        # Test basic build (with timeout)
        timeout 300 bash -c "cat templates/app/src/VehicleApp.template.cpp | docker run --rm -i velocitas-quick:test build" || {
          echo "‚ö†Ô∏è Build test timed out or failed - this may be expected in CI environment"
        }

    - name: Run automated test suite
      run: |
        # Make test script executable
        chmod +x ./test-mode2.sh
        
        # Run basic tests (no proxy in CI)
        ./test-mode2.sh --timeout 180 --output ci_test_results || {
          echo "‚ö†Ô∏è Some tests failed - checking logs..."
          if [ -d "ci_test_results" ]; then
            echo "Test result files:"
            ls -la ci_test_results/
            echo "Latest test log:"
            find ci_test_results -name "*.txt" -type f -exec tail -20 {} \;
          fi
        }

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quick-build-test-results
        path: ci_test_results/
        retention-days: 7


  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "Checking documentation..."
        
        # Check required files exist
        required_files=(
          "README.md"
          "DEVELOPER_WORKFLOW.md"
          "templates/app/src/VehicleApp.template.cpp"
          ".github/workflows/build-and-release.yml"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done

    - name: Check README links
      run: |
        echo "Checking README.md for broken internal links..."
        
        # Extract markdown links and check if referenced files exist
        grep -o '\[.*\](.*\.md)' README.md | sed 's/.*](\(.*\))/\1/' | while read -r link; do
          if [[ "$link" == http* ]]; then
            continue  # Skip external links
          fi
          
          if [ ! -f "$link" ]; then
            echo "‚ö†Ô∏è Broken link in README.md: $link"
          else
            echo "‚úÖ Valid link: $link"
          fi
        done

    - name: Validate template instructions
      run: |
        echo "Checking template instructions..."
        
        # Check for step markers in template
        step_count=$(grep -c "üîß STEP" templates/app/src/VehicleApp.template.cpp || echo 0)
        
        if [ "$step_count" -lt 3 ]; then
          echo "‚ùå Template should have at least 3 STEP markers"
          exit 1
        else
          echo "‚úÖ Template has $step_count step markers"
        fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-test-quick]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build quick image
      run: |
        docker build -f Dockerfile.quick -t velocitas-quick:pr .

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Test 1: Template compilation in quick build
        echo "Test 1: Template compilation"
        cat templates/app/src/VehicleApp.template.cpp | docker run --rm -i velocitas-quick:pr validate
        
        # Test 2: File mounting
        echo "Test 2: File mounting"
        docker run --rm -v $(pwd)/templates/app/src/VehicleApp.template.cpp:/input velocitas-quick:pr validate
        
        echo "‚úÖ Integration tests completed"

  publish-dev-images:
    runs-on: ubuntu-latest
    needs: [build-test-quick, documentation-check]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push development images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.quick
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max


  notify-status:
    runs-on: ubuntu-latest
    needs: [lint-and-validate, build-test-quick, documentation-check]
    if: always()
    
    steps:
    - name: Report CI status
      run: |
        if [ "${{ needs.lint-and-validate.result }}" = "success" ] && \
           [ "${{ needs.build-test-quick.result }}" = "success" ] && \
           [ "${{ needs.documentation-check.result }}" = "success" ]; then
          echo "üéâ All CI checks passed!"
        else
          echo "‚ùå Some CI checks failed:"
          echo "  - Lint & Validate: ${{ needs.lint-and-validate.result }}"
          echo "  - Quick Build Test: ${{ needs.build-test-quick.result }}"
          echo "  - Documentation: ${{ needs.documentation-check.result }}"
          exit 1
        fi