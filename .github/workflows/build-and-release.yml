name: Build and Release Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_QUICK: ${{ github.repository }}/velocitas-quick

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest-quick: ${{ steps.build-quick.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Quick Build Docker image
      id: build-quick
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.quick
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.meta.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ steps.meta.outputs.version }}
          VCS_REF=${{ github.sha }}

    - name: Tag latest after successful push
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        echo "✅ Docker image pushed successfully with tags:"
        echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.meta.outputs.version }}"
        echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:latest"

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate release notes
      id: release-notes
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Generate version for manual release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          case "${{ github.event.inputs.release_type }}" in
            major)
              NEW_VERSION=$(echo $LAST_TAG | sed 's/v//' | awk -F. '{print "v" ($1+1) ".0.0"}')
              ;;
            minor)
              NEW_VERSION=$(echo $LAST_TAG | sed 's/v//' | awk -F. '{print "v" $1 "." ($2+1) ".0"}')
              ;;
            patch)
              NEW_VERSION=$(echo $LAST_TAG | sed 's/v//' | awk -F. '{print "v" $1 "." $2 "." ($3+1)}')
              ;;
          esac
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
        # Generate changelog
        cat > release-notes.md << 'EOF'
        ## 🚀 Velocitas C++ Vehicle App Template Release
        
        ### 📦 Docker Images
        
        **Quick Build Utility (Recommended):**
        ```bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.release-notes.outputs.version }}
        ```
        
        ### 🎯 Quick Start
        
        ```bash
        # Pull the quick build utility
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.release-notes.outputs.version }}
        
        # Build your vehicle app instantly
        cat templates/app/src/VehicleApp.template.cpp | docker run --rm -i ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.release-notes.outputs.version }}
        ```
        
        ### 🏢 Enterprise Usage
        
        ```bash
        # With corporate proxy
        cat YourVehicleApp.cpp | docker run --rm -i \
          -e HTTP_PROXY=http://proxy:3128 \
          -e HTTPS_PROXY=http://proxy:3128 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.release-notes.outputs.version }}
        
        # With custom VSS specification
        cat YourVehicleApp.cpp | docker run --rm -i \
          -e VSS_SPEC_URL=https://company.com/vss.json \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ steps.release-notes.outputs.version }}
        ```
        
        ### 📊 Image Information
        
        - **Architecture**: linux/amd64, linux/arm64
        - **Base**: Eclipse Velocitas devcontainer
        - **Size**: ~2.5GB (includes pre-compiled dependencies)
        - **Build Time**: 60-90 seconds (cached dependencies)
        
        ### 🔧 What's Included
        
        - ✅ **Velocitas SDK** - Latest C++ vehicle application framework
        - ✅ **VSS 4.0** - Pre-generated vehicle signal model
        - ✅ **Build Tools** - CMake, Ninja, Conan, GCC
        - ✅ **Proxy Support** - Corporate network compatibility
        - ✅ **Custom VSS** - Support for company-specific signals
        - ✅ **Multi-platform** - AMD64 and ARM64 support
        
        ### 📚 Documentation
        
        - [README.md](README.md) - Complete usage guide
        - [DEVELOPER_WORKFLOW.md](DEVELOPER_WORKFLOW.md) - Development workflows
        - [Vehicle Signal Template](templates/app/src/VehicleApp.template.cpp) - Step-by-step tutorial
        
        ### 🧪 Quality
        
        Images are built with:
        - Multi-architecture support (AMD64/ARM64)
        - Optimized build process
        - Quality assurance
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release-notes.outputs.version }}
        name: Release ${{ steps.release-notes.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          README.md
          DEVELOPER_WORKFLOW.md
          templates/app/src/VehicleApp.template.cpp

    - name: Update latest tags
      run: |
        # Tag and push latest versions
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ needs.build.outputs.version }}
        
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:${{ needs.build.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:latest
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:latest

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "🎉 Successfully released Velocitas C++ Vehicle App Template!"
        echo "📦 Image available at:"
        echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_QUICK }}:latest"
        
    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release failed. Please check the workflow logs."
        exit 1